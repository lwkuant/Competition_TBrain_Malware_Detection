# -*- coding: utf-8 -*-
"""
Modeling
"""

### Load Packages
import pandas as pd
import numpy as np
from scipy import stats
from time import time
import re
import pickle
seed_split = 123
seed_feature = 1000
seed_skf = 2000
seed_model = 3000
seed_skf_layer_2 = 4000

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import StratifiedKFold

from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler

from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score

#import tensorflow as tf
#from keras import backend as K  

import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

import os
os.chdir('D:/Google雲端硬碟/Project/Competition_TBrain_Malware_Detection/Datasets')


### Load the Data
df_train = pd.read_csv('df_train.csv')
#df_train = df_train.ix[:, :-6]
 
df_train['Mean_occur_count_per_customer'] = df_train['Occur_count']/df_train['Occur_count_distinct_customer']
#
df_train['Mean_occur_count_per_product'] = df_train['Occur_count']/df_train['Occur_count_distinct_product']
#
df_train['time_interval_occurence_cv'] = df_train.ix[:, ['time_interval_occurence_std', 'time_interval_occurence_mean']].apply(lambda x: (x[0]/x[1] if x[1] != 0 else 0), axis = 1)
#
df_train['Weekday_weekend_norm'] = df_train['Weekday_6_norm'] + df_train['Weekday_7_norm']
df_train['Weekday_non_weekend_norm'] = df_train['Weekday_1_norm'] + df_train['Weekday_2_norm'] + df_train['Weekday_3_norm'] + df_train['Weekday_4_norm'] + df_train['Weekday_5_norm']
# 
#df_train['Mean_occur_count_per_customer_log'] = np.log1p(df_train['Mean_occur_count_per_customer'])
#
#df_train['Mean_occur_count_per_product_log'] = np.log1p(df_train['Mean_occur_count_per_product'])
#
df_tmp = df_train.ix[:, 50:79].apply(lambda x: x/np.sum(x), axis = 1)
df_tmp.columns = [x + '_norm' for x in df_train.columns[50:79]]
df_train = pd.concat([df_train, df_tmp], axis = 1)
#
df_train['QueryTS_cv'] = df_train['QueryTS_std']/df_train['QueryTS_mean'] 
#
df_train['QueryTS_variance'] = df_train['QueryTS_std']**2 
#
df_train['Occur_count_log'] = np.log(df_train['Occur_count'])
#
df_train['QueryTS_mean_mdeian_diff'] = df_train['QueryTS_mean'] - df_train['QueryTS_median']
#
df_train['time_interval_occurence_variance'] = df_train['time_interval_occurence_std']**2
#
df_train['Mean_occur_count_per_product_to_customer'] = (df_train['Mean_occur_count_per_product'].values+1)/(df_train['Mean_occur_count_per_customer'].values+1)
#
df_train['time_interval_occurence_mean_mdeian_diff'] = df_train['time_interval_occurence_mean'] - df_train['time_interval_occurence_median']
#









### Split the data
df_tr, df_valid = train_test_split(df_train, test_size = 0.2, random_state = seed_split, shuffle = True, stratify = df_train['Target'])
df_tr.index = range(df_tr.shape[0])
df_valid.index = range(df_valid.shape[0])



feature_to_use = open('Feature_to_use_v2')
feature_to_use = feature_to_use.read()
feature_to_use = re.sub('\n', '', feature_to_use)
feature_to_use = eval(feature_to_use)

'''
feature_to_use = ['ProductID_7acab3',
 'ProductID_055649',
 'ProductID_3ea8c3',
 'ProductID_634e6b',
 'ProductID_c105a0',
 'ProductID_c76d58',
 'ProductID_20f8a5',
 'ProductID_e47f04',
 'ProductID_885fab',
 'ProductID_b93794',
 'ProductID_d465fc',
 'ProductID_533133',
 'ProductID_a310bb',
 'ProductID_26a5d0',
 'ProductID_dd8d4a',
 'ProductID_8541a0',
 'ProductID_262880',
 'ProductID_75f310',
 'ProductID_218578',
 'ProductID_7acab3_norm',
 'ProductID_055649_norm',
 'ProductID_3ea8c3_norm',
 'ProductID_c105a0_norm',
 'ProductID_634e6b_norm',
 'ProductID_20f8a5_norm',
 'ProductID_c76d58_norm',
 'ProductID_885fab_norm',
 'ProductID_e47f04_norm',
 'ProductID_d465fc_norm',
 'ProductID_b93794_norm',
 'ProductID_533133_norm',
 'ProductID_8541a0_norm',
 'ProductID_26a5d0_norm',
 'ProductID_a310bb_norm',
 'ProductID_dd8d4a_norm',
 'ProductID_218578_norm',
 'ProductID_75f310_norm',
 'ProductID_7acab3_single_user',
 'ProductID_055649_single_user',
 'ProductID_c105a0_single_user',
 'ProductID_634e6b_single_user',
 'ProductID_c76d58_single_user',
 'ProductID_e47f04_single_user',
 'ProductID_885fab_single_user',
 'ProductID_d465fc_single_user',
 'ProductID_20f8a5_single_user',
 'ProductID_3ea8c3_single_user',
 'ProductID_b93794_single_user',
 'ProductID_533133_single_user',
 'ProductID_a310bb_single_user',
 'ProductID_26a5d0_single_user',
 'ProductID_fec24f_single_user',
 'ProductID_8541a0_single_user',
 'ProductID_dd8d4a_single_user',
 'ProductID_8b7f69_single_user',
 'ProductID_8452da_single_user',
 'ProductID_262880_single_user',
 'ProductID_3c2be6_single_user',
 'ProductID_0cdb7a_single_user',
 'ProductID_218578_single_user',
 'ProductID_75f310_single_user']
'''







def model_training_feature_importance(model, df, x, y):
    start_time = time()
    model.fit(x, y)
    print(time() - start_time)
    
    feature_importance = sorted(list(zip(list(df.columns), 
               model.feature_importances_)), key = lambda x: x[1]*(-1))
    
    score = roc_auc_score(y, model.predict_proba(x)[:, 1])
    
    return [feature_importance, score]


y_train = df_tr['Target'].values
X_train = df_tr.ix[:, feature_to_use]

'''
df_tr['ProductID_sum'] = df_tr.ix[:, ['ProductID_aaa9c8',
 'ProductID_8452da',
 'ProductID_05b409',
 'ProductID_3c2be6',
 'ProductID_8b7f69',
 'ProductID_0cdb7a',
 'ProductID_fec24f',
 'ProductID_0374c4',
 'ProductID_cc3a6a']].sum(axis = 1)

df_tr['ProductID_norm_sum'] = df_tr.ix[:, ['ProductID_262880_norm',
 'ProductID_aaa9c8_norm',
 'ProductID_8452da_norm',
 'ProductID_05b409_norm',
 'ProductID_3c2be6_norm',
 'ProductID_8b7f69_norm',
 'ProductID_0cdb7a_norm',
 'ProductID_fec24f_norm',
 'ProductID_0374c4_norm',
 'ProductID_cc3a6a_norm']].sum(axis = 1)

df_tr['ProductID_single_user_sum'] = df_tr.ix[:, ['ProductID_aaa9c8_single_user',
 'ProductID_cc3a6a_single_user',
 'ProductID_05b409_single_user',
 'ProductID_0374c4_single_user']].sum(axis = 1)
'''
df_tr = df_tr.ix[:, feature_to_use]


model = LGBMClassifier(n_estimators = 300,
                          random_state = seed_feature,
                          n_jobs = -1)
outcome = model_training_feature_importance(model, df_tr, X_train, y_train)
lgbm_feature_importance = outcome[0]
[x[0] for x in lgbm_feature_importance]
print(outcome[1])



#plt.figure(figsize = [30, 30])
#sns.heatmap(df_tr.ix[:, :57].corr(), vmin = -1, vmax = 1, annot = True)


def K_fold_validation(model, n_kfold, df, feature_to_use, seed_skf):
    skf = StratifiedKFold(n_splits=n_kfold, shuffle=True, random_state=seed_skf)
    
    start_time = time()
    score_list = []
    
    for train_ind, test_ind in list(skf.split(df.ix[:, feature_to_use].values, df['Target'].values)):
        model.fit(df.ix[:, feature_to_use].values[train_ind, :], df['Target'].values[train_ind])
        score = roc_auc_score(df['Target'].values[test_ind],
                                        model.predict_proba(df.ix[:, feature_to_use].values[test_ind, :])[:, 1])
        score_list.append(score)
        print(score)
    done_time = time() - start_time
    print(done_time)
    
    return np.mean(score_list) 


model = XGBClassifier(n_estimators = 300,
                          random_state = seed_model,
                          n_jobs = -1)

model = LGBMClassifier(n_estimators = 300,
                          random_state = seed_feature,
                          n_jobs = -1)

df_tr['Target'] = y_train
K_fold_validation(model, 10, df_tr, feature_to_use, seed_skf) 


### LGBM
# 只放 ProductID 的分數:
# 0.87862903331800202

# 只放 ProductID norm 的分數
# 0.88054916567093733

# 只放 ProductID single user 的分數:
# 0.87619801482067317

# ProductID + ProductID norm
# 0.89984382711901334

# ProductID + ProductID single user
# 0.9125666504442137
# 20 rounds: 0.91376802820411207

# ProductID norm + ProductID single user
# 0.9089794626496609

# ProductID + ProductID norm + ProductID single user
# 0.91538748667161174
# 20 rounds: 0.91707130114157409


# 只放 ProductID ，把 feature importance 為0的feature加總起來的分數:
# 0.87857219127464281
['ProductID_7acab3',
 'ProductID_055649',
 'ProductID_3ea8c3',
 'ProductID_634e6b',
 'ProductID_c105a0',
 'ProductID_c76d58',
 'ProductID_20f8a5',
 'ProductID_e47f04',
 'ProductID_885fab',
 'ProductID_b93794',
 'ProductID_d465fc',
 'ProductID_533133',
 'ProductID_a310bb',
 'ProductID_26a5d0',
 'ProductID_dd8d4a',
 'ProductID_8541a0',
 'ProductID_262880',
 'ProductID_75f310',
 'ProductID_218578']

['ProductID_aaa9c8',
 'ProductID_8452da',
 'ProductID_05b409',
 'ProductID_3c2be6',
 'ProductID_8b7f69',
 'ProductID_0cdb7a',
 'ProductID_fec24f',
 'ProductID_0374c4',
 'ProductID_cc3a6a']


# 只放 ProductID norm，把 feature importance 為0的feature加總起來的分數:
# 0.88221133795858153
['ProductID_7acab3_norm',
 'ProductID_055649_norm',
 'ProductID_3ea8c3_norm',
 'ProductID_c105a0_norm',
 'ProductID_634e6b_norm',
 'ProductID_20f8a5_norm',
 'ProductID_c76d58_norm',
 'ProductID_885fab_norm',
 'ProductID_e47f04_norm',
 'ProductID_d465fc_norm',
 'ProductID_b93794_norm',
 'ProductID_533133_norm',
 'ProductID_8541a0_norm',
 'ProductID_26a5d0_norm',
 'ProductID_a310bb_norm',
 'ProductID_dd8d4a_norm',
 'ProductID_218578_norm',
 'ProductID_75f310_norm']

['ProductID_262880_norm',
 'ProductID_aaa9c8_norm',
 'ProductID_8452da_norm',
 'ProductID_05b409_norm',
 'ProductID_3c2be6_norm',
 'ProductID_8b7f69_norm',
 'ProductID_0cdb7a_norm',
 'ProductID_fec24f_norm',
 'ProductID_0374c4_norm',
 'ProductID_cc3a6a_norm']

# 只放 ProductID single user，把 feature importance 為0的feature加總起來的分數:
# 0.87624568898498778
['ProductID_7acab3_single_user',
 'ProductID_055649_single_user',
 'ProductID_c105a0_single_user',
 'ProductID_634e6b_single_user',
 'ProductID_c76d58_single_user',
 'ProductID_e47f04_single_user',
 'ProductID_885fab_single_user',
 'ProductID_d465fc_single_user',
 'ProductID_20f8a5_single_user',
 'ProductID_3ea8c3_single_user',
 'ProductID_b93794_single_user',
 'ProductID_533133_single_user',
 'ProductID_a310bb_single_user',
 'ProductID_26a5d0_single_user',
 'ProductID_fec24f_single_user',
 'ProductID_8541a0_single_user',
 'ProductID_dd8d4a_single_user',
 'ProductID_8b7f69_single_user',
 'ProductID_8452da_single_user',
 'ProductID_262880_single_user',
 'ProductID_3c2be6_single_user',
 'ProductID_0cdb7a_single_user',
 'ProductID_218578_single_user',
 'ProductID_75f310_single_user',
 ]

['ProductID_aaa9c8_single_user',
 'ProductID_cc3a6a_single_user',
 'ProductID_05b409_single_user',
 'ProductID_0374c4_single_user']

### Random Forest










